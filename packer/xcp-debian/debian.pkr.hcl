# https://xcp-ng.org/blog/2024/02/22/using-packer-with-xcp-ng/

packer {
  required_plugins {
   xenserver= {
      version = ">= v0.7.3"
      source = "github.com/ddelnano/xenserver"
    }
  }
}

variable "xcp_host" {
  type        = string
  description = "The name of the XCP host (see hosts.pkr.hcl)."
  sensitive   = true
}

variable "xcp_password" {
  type        = string
  description = "The password used to interact with your XCP-ng."
  sensitive   = true
}

variable "sr_name" {
  type        = string
  description = "The SR on the host to create the template in (if the default in hosts.pkr.hcl is not correct)"
  default     = null
}

variable "sr_iso_name" {
  type        = string
  description = "The ISO-SR to packer will use"
  default     = "NFS ISO library (Buildteam)"
}

variable "debian_version" {
  type        = string
  description = "The Debian version to use"
}

variable "base_template_name" {
  type        = string
  description = "Name of built-in Debian template for the pool"
  default     = "Debian Stretch 9.0"
}

locals {
  xcp_username = local.xcp_info[var.xcp_host].username
  xcp_hostname = local.xcp_info[var.xcp_host].hostname
  pool_name    = "Build - ${var.xcp_host}"
  sr_name      = coalesce(var.sr_name, local.xcp_info[var.xcp_host].default_sr)
  network_name = local.xcp_info[var.xcp_host].network

  debian_version_major = regex("^([0-9]+)", var.debian_version)[0]

  # Most of our hosts don't have built-in templates even as new as
  # Debian 10, so just hard-code a reasonable default and allow
  # overriding per-host.
  debian_template_name = lookup(local.xcp_info[var.xcp_host], "base_template_name", "Debian Stretch 9.0")

  timestamp = regex_replace(timestamp(), "[- TZ:]", "")
}

source "xenserver-iso" "debian" {
  iso_name        = "debian-${var.debian_version}-amd64-netinst.iso"
  sr_iso_name     = var.sr_iso_name
  sr_name         = local.sr_name

  # We'll install the newer Rust-based guest tools via the preseed file,
  # so don't want to use XCP's built-in tools.iso
  tools_iso_name  = ""

  remote_host     = local.xcp_hostname
  remote_password = var.xcp_password
  remote_username = local.xcp_username

  # Tell packer to get the VM's IP via guest-tools
  ip_getter = "tools"

  boot_command    = [
    "<wait><wait><wait><esc><wait><wait><wait>",
    "/install.amd/vmlinuz ",
    "initrd=/install.amd/initrd.gz ",
    "auto=true ",
    "domain= ",
    "url=http://downloads.build.couchbase.com/preseed/debian${local.debian_version_major}.cfg ",
    "hostname=debian ",
    "fb=false interface=auto ",
    "noprompt quiet --- <enter>",
  ]

  clone_template = local.debian_template_name
  vm_name        = "Debian ${var.debian_version} Template - ${local.pool_name}"
  vm_description = "Debian ${var.debian_version} Template, created with Packer"
  vcpus_max      = 2
  vcpus_atstartup = 2
  vm_memory      = 2048 #MB
  network_names = [local.network_name]
  disk_size      = 4096 #MB
  disk_name      = "debian disk"
  vm_tags        = ["Generated by Packer"]

  ssh_username            = "couchbase"
  ssh_password            = "couchbase"
  ssh_wait_timeout        = "60000s"
  ssh_handshake_attempts  = 10000

  # Save format "none" - we don't want to download the VM locally, just
  # keep the prepared template on XCP
  format           = "none"
  keep_vm          = "always"
}

build {
  sources = ["xenserver-iso.debian"]

  # Steps to perform after first reboot
  provisioner "shell" {
    inline = [
      "mkdir -p /home/couchbase/.ssh",
      "curl --fail http://downloads.build.couchbase.com/ssh/id_buildteam.pub > /home/couchbase/.ssh/authorized_keys",
      "chmod 600 /home/couchbase/.ssh/authorized_keys",

      # Resources to reset - https://systemd.io/BUILDING_IMAGES/
      "sudo rm -f /etc/machine-id /var/lib/systemd/random-seed /etc/hostname /etc/machine-info /var/lib/systemd/credential.secret",
    ]
  }
}
