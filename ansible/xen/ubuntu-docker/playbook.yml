---
- name: Deploy new Ubuntu VM
  gather_facts: False
  hosts: xenservers
  vars:
    disksize_in_gib: "{{ disksize | int * 1024 * 1024 * 1024 }}"
    memory_in_gib: "{{ memory | int * 1024 * 1024 * 1024 }}"

  tasks:
    - name: Check for existence of docker-config.json
      local_action: stat path=docker-config.json
      register: filestat
      failed_when: filestat.stat.exists == False

    - name: Get UUID of host's pool
      command: xe pool-list --minimal
      register: pooluuid
      failed_when: pooluuid.stdout == ""

    - name: Enable auto-boot on pool
      command: xe pool-param-set uuid="{{ pooluuid.stdout }}" other-config:auto_poweron=true

    - name: Get UUID of share SR
      command: xe sr-list name-label="{{ sr_name }}" --minimal
      register: sruuid
      changed_when: False
      failed_when: sruuid.stdout == ""

    - name: Get the UUID of the VM template
      command: xe template-list name-label="{{ vm_template }}" --minimal
      register: templateuuid
      changed_when: False
      failed_when: templateuuid.stdout == ""

    - name: Get the UUID of the network
      command: xe network-list name-label="{{ network_name }}" --minimal
      register: networkuuid
      changed_when: False
      failed_when: networkuuid.stdout == ""

    - name: Deploy new VM
      command: xe vm-install template={{ templateuuid.stdout }} new-name-label="{{ vm_name }}" sr-uuid={{ sruuid.stdout }}
      register: vmuuid

    - name: Set vcpu count
      command: xe vm-param-set VCPUs-max={{ vcpus }} VCPUs-at-startup={{ vcpus }} uuid={{ vmuuid.stdout }}

    - name: Get the UUID of the disk
      command: xe vm-disk-list vbd-params=device=xvda uuid={{ vmuuid.stdout }} --minimal
      register: vdiuuid

    - name: Set disk size
      command: xe vdi-resize disk-size="{{ disksize_in_gib }}" uuid={{ vdiuuid.stdout }}

    - name: Set memory
      command: xe vm-memory-limits-set uuid={{ vmuuid.stdout }} dynamic-min="{{ memory_in_gib }}" dynamic-max="{{ memory_in_gib }}" static-max="{{ memory_in_gib }}" static-min="{{ memory_in_gib }}"

    - name: Attach VM to {{ network_name }}
      command: xe vif-create vm-uuid={{ vmuuid.stdout }} network-uuid={{ networkuuid.stdout }} mac=random device=0

    - name: Insert CD
      command: xe vm-cd-add vm={{ vmuuid.stdout }} cd-name="{{ install_iso }}" device=1

    - name: Enable auto-boot for VM
      command: xe vm-param-set uuid={{ vmuuid.stdout }} other-config:auto_poweron=true

    - name: Boot VM and start installation
      command: xe vm-start uuid={{ vmuuid.stdout }}

    - name: Get the boot time for the VM
      command: xe vm-param-get param-name=start-time uuid={{ vmuuid.stdout }}
      register: boottime

    - name: Watch for the first reboot (will take several minutes)
      shell: export starttime={{ boottime.stdout }}; while [[ ${starttime} == {{ boottime.stdout }} ]]; do sleep 5; starttime=`xe vm-param-get param-name=start-time uuid={{ vmuuid.stdout }}`; done
      async: 1800
      poll: 15

    - name: Wait for IP address of new VM
      shell: export ip=""; while [[ $ip != 172* ]]; do sleep 2; ip=`xe vm-param-get uuid={{ vmuuid.stdout }} param-name=networks param-key=0/ip`; done; echo $ip
      register: vmip

    - name: Add new VM to Ansible group
      add_host:
        name: "{{ vmip.stdout }}"
        groups: newvms

    - name: Eject CD
      shell: "xe vm-cd-eject uuid={{ vmuuid.stdout }} || true"

- name: Do stuff on new VMs
  gather_facts: True
  hosts: newvms

  vars:
    ansible_user: couchbase
    ansible_password: couchbase
    ansible_become_password: couchbase
    ansible_python_interpreter: /usr/bin/python3

  tasks:

    - name: Wait for new VM to be connectable
      wait_for_connection:
        timeout: 300
        sleep: 3

    # The space in " yes" is important due to the way 'cut' works
    - name: Wait for clock to synchronize
      shell: export synced=no; while [ "$synced" != " yes" ]; do sleep 1; synced=$(timedatectl status | grep synchronized | cut -d':' -f2); done

    - name: Set hostname
      hostname:
        name: "{{ vm_name }}"
      become: true

    - name: Update /etc/hosts
      lineinfile:
        path: /etc/hosts
        regexp: '^127\.0\.1\.1'
        line: "127.0.1.1 {{ vm_name }}"
      become: true

    - name: Enable coredumps in /tmp
      sysctl:
        name: kernel.core_pattern
        value: "/tmp/core.%e.%p.%h.%t"
        reload: yes
      become: true
      tags: core
      changed_when: true

    - name: Perform system upgrades and clean unused packages (will take several minutes)
      apt:
        update_cache: yes
        upgrade: dist
      become: true

    - name: Mount NAS directories
      tags: mount
      mount:
        path: "{{ item.mountpoint }}"
        src: "{{ item.nasserver }}:{{ item.naspath }}"
        fstype: nfs
        # https://docs.cloudbees.com/docs/cloudbees-ci-kb/latest/client-and-managed-controllers/nfs-guide#_3_configure_nfs_client_mount_point
        opts: _netdev,rw,bg,hard,intr,rsize=32768,wsize=32768,noatime,nodiratime,sync
        dump: "0"
        passno: "0"
        state: mounted
      loop:
        - mountpoint: /buildteam
          nasserver: nas.build.couchbase.com
          naspath: /data/buildteam
      become: true

    - name: Create /home/couchbase/.local/bin directory
      file:
        path: /home/couchbase/.local/bin
        state: directory
        mode: 0755
        owner: couchbase

    - name: Create /home/couchbase/.docker directory
      file:
        path: /home/couchbase/.docker
        state: directory
        mode: 0700
        owner: couchbase

    - name: Add .docker/config.json for couchbase user
      copy:
        src: docker-config.json
        dest: /home/couchbase/.docker/config.json
        mode: 0600
        owner: couchbase

    # This unfortunately can't be done easily in the Subiquity config from
    # fully_automated_iso - the default "couchbase" user doesn't get created
    # before the late-commands are run
    - name: Add couchbase user to docker group
      user:
        name: couchbase
        groups: docker
        append: yes
      become: true

    - name: Disable automatic updates
      apt:
        name: unattended-upgrades
        state: absent
        purge: yes
      become: true

    - name: Purge cloud-init
      apt:
        name: cloud-init
        state: absent
        purge: yes
      become: true

    - name: Purge cloud-init leftover config
      file:
        name: "{{ item }}"
        state: absent
      loop: [ /etc/cloud, /var/lib/cloud ]
      become: true

    - name: Clean up no-longer-needed packages
      apt:
        autoremove: yes
        purge: yes
      become: true

    - name: Reboot to be sure
      reboot:
      become: true

    - name: Ensure Docker is fully running
      service:
        name: docker
        state: started
      register: dockerdetails
      until: dockerdetails.status.ActiveState == "active"
      retries: 40
      delay: 2

    # Address an issue affecting tsan on ubuntu 24
    # https://stackoverflow.com/questions/77850769/fatal-threadsanitizer-unexpected-memory-mapping-when-running-on-linux-kernels
    - name: Ubuntu TSAN fix
      block:
        - name: Ensure sysctl config file exists
          file:
            path: /etc/sysctl.d/99-mmap_rnd_bits.conf
            state: touch
          become: true

        - name: Ensure sysctl setting for vm.mmap_rnd_bits is present
          lineinfile:
            path: /etc/sysctl.d/99-mmap_rnd_bits.conf
            regexp: '^vm/mmap_rnd_bits'
            line: 'vm.mmap_rnd_bits = 28'
            state: present
          become: true

        - name: Apply settings
          command: sysctl -p /etc/sysctl.d/99-mmap_rnd_bits.conf
          become: true

    - name: Process VM-specific roles
      include_role:
        name: "{{ rolename }}"
      loop: "{{ role_list.split(',') }}"
      loop_control:
        loop_var: rolename

    - name: Get Docker Swarm token
      when: swarm_manager is defined
      command: docker -H {{ swarm_manager }} swarm join-token -q --rotate worker
      register: swarm_join_token
      tags: docker_swarm

    - name: Join Docker Swarm
      when: swarm_manager is defined
      command: docker swarm join --token {{ swarm_join_token.stdout }} {{ swarm_manager }}:2377
      tags: docker_swarm

    - name: Add Swarm labels
      when: swarm_labels is defined
      command: docker -H {{ swarm_manager }} node update --label-add {{ item }} {{ vm_name }}
      loop: "{{ swarm_labels.split(',') }}"
      tags: docker_swarm
