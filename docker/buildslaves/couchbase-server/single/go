#!/bin/sh -ex

# Things you might want to adjust:
IMAGE=couchbasebuild/server-linux-build
# You can probably ignore the rest of this


export DOCKER_BUILDKIT=1

. ../versions

mkdir -p build
cp -a ../../util/couchbuilder_transition_start.sh build/couchbuilder_start.sh
cp -a ../../util/swarm*.properties build
cp -a ../../util/healthcheck.sh build

TAG=$(date +%Y%m%d)

PUBLISH=false
SIDECARS=false

usage() {
  echo "Usage: $0 [--publish] [--sidecars]"
  echo "Options:"
  echo "  --publish    Publish the image to docker hub"
  echo "  --sidecars   Build and publish sidecars"
}

for arg in "$@"; do
  case "${arg}" in
    --publish)
      PUBLISH=true
      ;;
    --sidecars)
      SIDECARS=true
      ;;
    *)
      echo "Invalid flag: ${arg}"
      usage
      exit 1
      ;;
  esac
done

if ${PUBLISH}; then
  BUILDX=buildx
  ACTION=--push
  PLATFORMS=linux/amd64,linux/arm64
else
  if [ "$(uname -m)" = "arm64" -o "$(uname -m)" = "aarch64" ]; then
    PLATFORMS=linux/arm64
  else
    PLATFORMS=linux/amd64
  fi
fi

docker ${BUILDX} build ${ACTION} \
  --platform ${PLATFORMS} \
  --tag ${IMAGE}:${TAG} \
  --tag ${IMAGE}:latest \
  --build-arg IMAGEROOT=${IMAGEROOT} \
  --build-arg CONTAINER_TAG_ARG=${IMAGE}:${TAG} \
  --build-arg ASCIIDOCTOR_VER=${ASCIIDOCTOR} \
  --build-arg AUTOCONF_VER=${AUTOCONF} \
  --build-arg AUTOMAKE_VER=${AUTOMAKE} \
  --build-arg BINUTILS_VER=${BINUTILS} \
  --build-arg CBDEP_VER=${CBDEP} \
  --build-arg CCACHE_VER=${CCACHE} \
  --build-arg CLANG_9_VER=${CLANG_9} \
  --build-arg CLANG_9_TAG=${CLANG_9_TAG} \
  --build-arg CLANG_15_VER=${CLANG_15} \
  --build-arg CLANG_15_TAG=${CLANG_15_TAG} \
  --build-arg CLANG_18_VER=${CLANG_18} \
  --build-arg CLANG_18_TAG=${CLANG_18_TAG} \
  --build-arg CMAKE_MAJOR=${CMAKE_MAJOR} \
  --build-arg CMAKE_MINOR=${CMAKE_MINOR} \
  --build-arg CMAKE_PATCH=${CMAKE_PATCH} \
  --build-arg DOCKER_VER=${DOCKER} \
  --build-arg GCC_10_VER=${GCC_10} \
  --build-arg GCC_10_TAG=${GCC_10_TAG} \
  --build-arg GCC_13_VER=${GCC_13} \
  --build-arg GCC_13_TAG=${GCC_13_TAG} \
  --build-arg GDB_VER=${GDB} \
  --build-arg GIT_VER=${GIT} \
  --build-arg JNLP_AGENT_VER=${JNLP_AGENT} \
  --build-arg JQ_VER=${JQ} \
  --build-arg LIBTOOL_VER=${LIBTOOL} \
  --build-arg OPENSSL_VER=${OPENSSL_111} \
  --build-arg PATCH_VIA_GERRIT_VER=${PATCH_VIA_GERRIT} \
  --build-arg PYTHON3_MAJOR=${PYTHON3_MAJOR} \
  --build-arg PYTHON3_MINOR=${PYTHON3_MINOR} \
  --build-arg PYTHON3_PATCH=${PYTHON3_PATCH} \
  --build-arg RUBY_MAJOR=${RUBY_MAJOR} \
  --build-arg RUBY_MINOR=${RUBY_MINOR} \
  --build-arg RUBY_PATCH=${RUBY_PATCH} \
  --build-arg RUBY_INSTALL_MAJOR=${RUBY_INSTALL_MAJOR} \
  --build-arg RUBY_INSTALL_MINOR=${RUBY_INSTALL_MINOR} \
  --build-arg RUBY_INSTALL_PATCH=${RUBY_INSTALL_PATCH} \
  --build-arg TINI_VER=${TINI} \
  --build-arg YQ_VER=${YQ} \
  .

if ${SIDECARS}; then
  # Also ensure the sidecars are updated appropriately
  for pkg_type in deb rpm
  do
    pushd ${pkg_type}-sidecar
    ./go $1
    popd
  done
fi
